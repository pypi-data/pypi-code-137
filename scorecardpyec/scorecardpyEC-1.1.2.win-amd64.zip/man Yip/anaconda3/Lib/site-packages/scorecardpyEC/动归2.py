class DAGLongestPath:
    
    def __init__(self):
        self.nodes = []
        self.edges = {}
        self.rev_edges = {}
        self.unseen_sources = set()
        self.longest_in_weight = {}
        self.longest_in_route = {}
        self.longest_route = None
        self.longest_route_weight = None
    
    def add_node(self, label):
        self.nodes.append(label)
        self.edges[label] = set()
        self.rev_edges[label] = set()
        self.unseen_sources.add(label)
        
    def add_edge(self, source, target,weight):
        self.edges[source].add((target,weight))
        self.rev_edges[target].add(source)
        self.unseen_sources.discard(target)
        
    def __del_edges_from(self, source):
        targets = self.edges[source]
        self.edges[source] = set()
        for target,weight in targets:
            self.rev_edges[target].discard(source)
            if len(self.rev_edges[target]) == 0: # no incoming edges
                self.unseen_sources.add(target)
                       
    def longest_path(self):
        
        while len(self.unseen_sources) > 0:
            print('************************************************************************')
            sourcenode = self.unseen_sources.pop()
            

            # if len(self.edges[sourcenode]) == 0: 
            #     new_weight = self.longest_in_weight.get(sourcenode, 0)+weight
            #     if self.longest_route is None or self.longest_route_weight < new_weight:
            #         self.longest_route = new_route
            #         self.longest_route_weight = new_weight
            #     continue
            
           
            for target,weight in self.edges[sourcenode]:
                
                
                new_weight = self.longest_in_weight.get(sourcenode, 0)+weight
                new_route = self.longest_in_route.get(sourcenode, []) + [sourcenode]
                print('=========================')
                print('sourcenode=',sourcenode,'target=',target,'weight',weight,'new_weight=',new_weight)
                print(self.longest_in_weight)
                print(self.longest_in_route)
                print(new_weight)
                print(new_route)
                if 3 in new_route and 2 in new_route and target==4:
                    continue
                
                # if 3 in new_route and 4 in new_route and target==5:
                #     continue
                
                if self.longest_in_weight.get(target, 0) < new_weight:
                    self.longest_in_weight[target] = new_weight                    
                    self.longest_in_route[target] = new_route
                print(self.longest_in_weight)
                print(self.longest_in_route)
            self.__del_edges_from(sourcenode)
            
               
        return (self.longest_route, self.longest_route_weight)


import numpy as np
if __name__ == '__main__':
    dag = DAGLongestPath()
    dag.add_node(1)
    dag.add_node(2)
    dag.add_node(3)
    dag.add_node(4)
    # dag.add_node(5)
    # dag.add_node(6)
    # dag.add_node(7)
##############################  
  
    dag.add_edge(1,2,2)
    dag.add_edge(1,3,3)
    dag.add_edge(1,4,2)
    
    dag.add_edge(2,3,2)
    dag.add_edge(2,4,2)
    
    dag.add_edge(3,4,2)
    

    
    print(dag.longest_path())