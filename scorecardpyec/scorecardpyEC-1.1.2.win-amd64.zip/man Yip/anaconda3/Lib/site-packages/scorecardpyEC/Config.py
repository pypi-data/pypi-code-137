# -*- coding: utf-8 -*-
"""
Created on Fri Jan  7 17:19:05 2022

@author: man Yip
"""

import pandas as pd
import pickle
import json
import os

def project_config(obj,config_parser):
    obj.model_name  = config_parser.get('PROJECT CONFIG', 'model_name',fallback='MODEL_TEST')
    obj.work_space = config_parser.get('PROJECT CONFIG', 'work_space')
    obj.running_step = config_parser.getint('PROJECT CONFIG', 'running_step',fallback=50)
    
    
def data_config(obj,config_parser):
    obj.data_file_path = config_parser.get('DATA CONFIG', 'data_file_path')
    
    obj.train_data_name = config_parser.get('DATA CONFIG', 'train_data_name',fallback='train')
    
    obj.y = config_parser.get('DATA CONFIG', 'y',fallback='y')
    
    obj.y_label = config_parser.get('DATA CONFIG', 'y_label',fallback='{"good":0,"bad":1}')
    obj.y_label = json.loads(obj.y_label)
    
    obj.sample_weight_col = config_parser.get('DATA CONFIG', 'sample_weight_col',fallback='None')
    if obj.sample_weight_col == 'None':
        obj.sample_weight_col=None

    obj.data_group_cols = config_parser.get('DATA CONFIG', 'data_group_cols',fallback='None')
    if obj.data_group_cols == 'None':
        obj.data_group_cols=None
    else:
        obj.data_group_cols = obj.data_group_cols.split(',')  
        
def bins_config(obj,config_parser):
    obj.breaks_list = config_parser.get('BINS CONFIG', 'breaks_list',fallback='None')
    if obj.breaks_list == 'None':
        obj.breaks_list=None
    else:
        obj.breaks_list = json.loads(obj.breaks_list)
        
        
    obj.special_values = config_parser.get('BINS CONFIG', 'special_values ',fallback='None')
    if obj.special_values == 'None':
        obj.special_values=None
    else:
        obj.special_values = json.loads(obj.special_values)
        
    obj.stop_limit = config_parser.getfloat('BINS CONFIG', 'stop_limit',fallback=0.05)   
    
    obj.bin_num_limit = config_parser.getint('BINS CONFIG', 'bin_num_limit',fallback=8)
    
    obj.count_distr_limit = config_parser.getfloat('BINS CONFIG', 'count_distr_limit',fallback=0.02)
    
    obj.no_cores = config_parser.get('BINS CONFIG', 'no_cores',fallback='None')
    
    if obj.no_cores == 'None':
        obj.no_cores=None
    else:
        obj.no_cores=int(obj.no_cores)
        
    obj.method = config_parser.get('BINS CONFIG', 'method',fallback='tree')       
    
    obj.min_distr_limit = config_parser.get('BINS CONFIG', 'min_distr_limit',fallback='None')
    if obj.min_distr_limit == 'None':
        obj.min_distr_limit=None
    else:
        obj.min_distr_limit=float(obj.min_distr_limit)
    
    obj.max_distr_limit = config_parser.get('BINS CONFIG', 'max_distr_limit',fallback='None')
    if obj.max_distr_limit == 'None':
        obj.max_distr_limit=None
    else:
        obj.max_distr_limit=float(obj.max_distr_limit)
    
    obj.distr_step = config_parser.get('BINS CONFIG', 'distr_step',fallback='None')
    if obj.distr_step == 'None':
        obj.distr_step=None
    else:
        obj.distr_step=float(obj.distr_step)
    
    obj.is_merge_special_values = config_parser.getboolean('BINS CONFIG', 'is_merge_special_values',fallback=True)
    
    obj.merge_missing_differ_treat = config_parser.get('BINS CONFIG', 'merge_missing_differ_treat',fallback='off')
    
    obj.merge_special_count_distr_limit = config_parser.get('BINS CONFIG', 'merge_special_count_distr_limit',fallback='None')
    if obj.merge_special_count_distr_limit == 'None':
        obj.merge_special_count_distr_limit=None
    else:
        obj.merge_special_count_distr_limit=float(obj.merge_special_count_distr_limit)
    
    obj.kw_bins_args = config_parser.get('MODEL CONFIG','kw_bins_args',fallback='None')
    if obj.kw_bins_args == 'None':
        obj.kw_bins_args={}
    else:
        obj.kw_bins_args = json.loads(obj.kw_bins_args)
    
    obj.is_monotonic = config_parser.getboolean('BINS CONFIG', 'is_monotonic',fallback=True)
    
def filter_x_config(obj,config_parser):
    obj.psi_data_file_path = config_parser.get('FILTER_X CONFIG', 'psi_data_file_path',fallback='None')
    if obj.psi_data_file_path == 'None':
        obj.psi_data_file_path=None 
        
    obj.psi_base_name = config_parser.get('FILTER_X CONFIG', 'psi_base_name',fallback='None')
    if obj.psi_base_name == 'None':
        obj.psi_base_name=None 

    obj.x_filter = config_parser.get('FILTER_X CONFIG', 'x_filter',fallback='None')
    if obj.x_filter == 'None':
        obj.x_filter=None
    else:
        obj.x_filter = obj.x_filter.split(',')
        
    obj.user_del = config_parser.get('FILTER_X CONFIG', 'user_del',fallback='None')
    if obj.user_del == 'None':
        obj.user_del=None
    else:
        obj.user_del = obj.user_del.split(',')
        
    obj.user_save = config_parser.get('FILTER_X CONFIG', 'user_save',fallback='None')
    if obj.user_save == 'None':
        obj.user_save=None
    else:
        obj.user_save = obj.user_save.split(',')
        
    obj.filter_data_name = config_parser.get('FILTER_X CONFIG', 'filter_data_name',fallback='None')
    if obj.filter_data_name == 'None':
        obj.filter_data_name=None
    else:
        if obj.filter_data_name.startswith('$'):
            if obj.filter_data_name[1:]=='train_data_name':
                obj.filter_data_name = obj.train_data_name
            else:
                print('filter_data_name引用了无效的数据集，将其重置为None')
            
                
        
def model_config(obj,config_parser):
    obj.fit_weight_col = config_parser.get('MODEL CONFIG', 'fit_weight_col',fallback='None')
    if obj.fit_weight_col == 'None':
        obj.fit_weight_col=None
    
    obj.measure_index = config_parser.get('MODEL CONFIG', 'measure_index',fallback='ks')
    
    obj.measure_weight_col = config_parser.get('MODEL CONFIG', 'measure_weight_col',fallback='None')
    if obj.measure_weight_col == 'None':
        obj.measure_weight_col=None
    
    obj.measure_frac = config_parser.get('MODEL CONFIG', 'measure_frac',fallback='None')
    if obj.measure_frac == 'None':
        obj.measure_frac=None
    else:
        obj.measure_frac=float(obj.measure_frac)
        
    obj.measure_data_name = config_parser.get('MODEL CONFIG', 'measure_data_name',fallback='None')
    if obj.measure_data_name == 'None':
        obj.measure_data_name=None
        
    obj.kw_measure_args = config_parser.get('MODEL CONFIG', 'kw_measure_args',fallback='None')
    if obj.kw_measure_args == 'None':
        obj.kw_measure_args={}
    else:
        obj.kw_measure_args = json.loads(obj.kw_measure_args)
        
    obj.max_pvalue_limit = config_parser.getfloat('MODEL CONFIG', 'max_pvalue_limit',fallback=0.05)
    
    obj.max_vif_limit = config_parser.getint('MODEL CONFIG', 'max_vif_limit',fallback=3)
    
    obj.max_corr_limit = config_parser.getfloat('MODEL CONFIG', 'max_corr_limit',fallback=0.6)
    
    obj.coef_sign = config_parser.get('MODEL CONFIG', 'coef_sign',fallback='+')
    
    obj.iter_num = config_parser.getint('MODEL CONFIG', 'iter_num',fallback=15)
    
    obj.kw_algorithm_class_args = config_parser.get('MODEL CONFIG', 'kw_algorithm_class_args',fallback='None')
    if obj.kw_algorithm_class_args == 'None':
        obj.kw_algorithm_class_args={}
    else:
        obj.kw_algorithm_class_args = json.loads(obj.kw_algorithm_class_args)


def card_config(obj,config_parser):
    obj.points0 = config_parser.getint('CARD CONFIG', 'points0',fallback=600)

    obj.odds0 = config_parser.get('CARD CONFIG', 'odds0',fallback='None')
    if obj.odds0 == 'None':
        obj.odds0=None
    else:
        obj.odds0 = float(obj.odds0)
        
    obj.pdo = config_parser.getint('CARD CONFIG', 'pdo',fallback=80)
        
    obj.basepoints_eq0 = config_parser.getboolean('CARD CONFIG', 'basepoints_eq0',fallback=True)
        
        
def report_config(obj,config_parser):
    obj.report_name = config_parser.get('REPORT CONFIG', 'report_name',fallback='report') 
    
    obj.interval_cut_by = config_parser.get('REPORT CONFIG', 'interval_cut_by',fallback='None')
    if obj.interval_cut_by=='None':
        obj.interval_cut_by=[obj.train_data_name]
    else:
        obj.interval_cut_by=obj.interval_cut_by.split(',')

    obj.table1_interval_no = config_parser.getint('REPORT CONFIG', 'table1_interval_no',fallback=10)   
    
    obj.table2_interval_no = config_parser.getint('REPORT CONFIG', 'table2_interval_no',fallback=100) 
    
    obj.table2_head = config_parser.getint('REPORT CONFIG', 'table2_head',fallback=5) 
    
    obj.show_lift = config_parser.get('REPORT CONFIG', 'show_lift',fallback='1,5,10') 
    obj.show_lift = obj.show_lift.split(',')
    obj.show_lift = list(map(lambda x:int(x),obj.show_lift))
    
    obj.perf_pivot_table_data_file_path = config_parser.get('REPORT CONFIG', 'perf_pivot_table_data_file_path',fallback='None') 
    if obj.perf_pivot_table_data_file_path == 'None':
        obj.perf_pivot_table_data_file_path=None
        
    obj.reverse_between_score_prob = config_parser.getboolean('REPORT CONFIG', 'reverse_between_score_prob',fallback=True)
    
    obj.var_describe_file_path = config_parser.get('REPORT CONFIG', 'var_describe_file_path',fallback=None)
    if obj.var_describe_file_path=='None':
        obj.var_describe_file_path=None