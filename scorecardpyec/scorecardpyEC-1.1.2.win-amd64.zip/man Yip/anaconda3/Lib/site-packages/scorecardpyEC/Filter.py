# -*- coding: utf-8 -*-
"""
Created on Sat Jan  8 11:10:43 2022

@author: j2sej
"""
import numpy as np
from Bin import ECBin
import os
import pandas as pd
import pickle
from itertools import combinations

def _del_func(obj,name,del_cols,values=None,thv=None):
    del_cols = list(set(del_cols))
    obj.filtered_cols[name] = (del_cols,values,thv)
    for i in del_cols:
        if i in obj.saved_X_cols:
            if (obj.user_save is None) or (i not in obj.user_save):
                obj.saved_X_cols.remove(i)
            
def high_homogeneity(obj,thv):
    def _f1(x):
        a = x.value_counts(dropna=False).iloc[0]
        b = x.shape[0]
        a = np.around(a/b,2)
        return a
    hh_del_cols=[]
    hh_values=[]
    for k,v in obj.datas.items():
        if (obj.filter_data_name is not None) and (k!=obj.filter_data_name):
            print('数据集不是指定数据',k,obj.filter_data_name)
            continue
        same_rate = v[obj.saved_X_cols].apply(_f1)
        hh_values.append(same_rate)
        del_cols = list(same_rate[same_rate >= thv].index.values)
        hh_del_cols.extend(del_cols)

    hh_values = pd.concat(hh_values,axis=1).max(axis=1)
    _del_func(obj,'high_homogeneity',hh_del_cols,hh_values,thv)
    
def high_psi(obj,thv):
    from Tool import psi 
    if obj.psi_data_file_path is None:
        return
    obj.psi_datas={}
    for f in  os.listdir(obj.psi_data_file_path):
        ind = f.rfind('.')
        suf = f[ind+1:]
        name = f[:ind]
        file = '%s/%s'%(obj.psi_data_file_path,f)
        if suf=='xlsx':
            obj.psi_datas[name] = pd.read_excel(file,index_col=0)
        elif suf=='csv':
            obj.psi_datas[name] = pd.read_csv(file,index_col=0)
        elif suf=='pkl':
            with open(file,'rb') as f:
                obj.psi_datas[name] = pickle.load(f)
                
    dat_arr = [obj.psi_datas[obj.psi_base_name]]
    for k, v in obj.psi_datas.items():
        if k!=obj.psi_base_name:
           dat_arr.append(v)
           
    hp_del_cols=[]       
    hp_values={}
    for i in obj.saved_X_cols:
        max_psi,psi_dfs = psi([df[i] for df in dat_arr],0.2,0.1)
        hp_values[i] = max_psi
        if max_psi > thv:
            hp_del_cols.append(i)
            
    _del_func(obj,'high_psi',hp_del_cols,pd.Series(hp_values),thv) 
# def high_psi_bak(obj,thv):
#     from Tool import psi 
#     if obj.psi_data_file_path is None:
#         return
#     obj.psi_datas={}
#     for f in  os.listdir(obj.psi_data_file_path):
#         ind = f.rfind('.')
#         suf = f[ind+1:]
#         name = f[:ind]
#         file = '%s/%s'%(obj.psi_data_file_path,f)
#         if suf=='xlsx':
#             obj.psi_datas[name] = pd.read_excel(file,index_col=0)
#         elif suf=='csv':
#             obj.psi_datas[name] = pd.read_csv(file,index_col=0)
#         elif suf=='pkl':
#             with open(file,'rb') as f:
#                 obj.psi_datas[name] = pickle.load(f)
        
#     obj.psi_datas_bins={}
#     for k,v in obj.psi_datas.items():
#         tmp = ECBin.trans_data_to_woebin(v,obj.train_final_bins,y=obj.y,ylabel=obj.y_label,weight=obj.sample_weight_col)
#         tmp = pd.concat(tmp)
#         # tmp.to_excel('%s/psi_train_final_bins_trans_%s.xlsx'%(obj.work_space,k))
#         obj.psi_datas_bins[k]=tmp
    
#     bin_comb = list(combinations(obj.psi_datas_bins.values(),2))
#     name_comb = list(combinations(obj.psi_datas_bins.keys(),2))
#     ztmp = zip(name_comb,bin_comb)
    
#     hp_del_cols=[]
#     hp_values=[]
#     for i in ztmp:
#         bin_tmp1 = i[1][0]
#         bin_tmp2 = i[1][1]
#         name_tmp = '#'.join([i[0][0],i[0][1]])
#         psi_value,df_psi = psi(bin_tmp1,bin_tmp2)
#         df_psi.to_excel('%s/psi_train_final_bins_trans_%s.xlsx'%(obj.work_space,name_tmp))
#         hp_values.append(psi_value)
#         del_cols = list(psi_value[psi_value >= thv].index.values)
#         hp_del_cols.extend(del_cols)
#     hp_values = pd.concat(hp_values,axis=1).max(axis=1)
#     _del_func(obj,'high_psi',hp_del_cols,hp_values,thv)  
         
def iv_small(obj,thv):
    iv_small_del_cols=[]
    iv_small_values=[]
    for k,v in obj.final_bins_trans.items():
        if (obj.filter_data_name is not None) and (k!=obj.filter_data_name):
            print('数据集不是指定数据',k,obj.filter_data_name)
            continue
        tmp = ECBin.bins2iv(v)
        tmp = tmp.loc[obj.saved_X_cols]
        iv_small_values.append(tmp)
        tmp = tmp[tmp < thv]
        small_iv = list(tmp.index)
        iv_small_del_cols.extend(small_iv)
    iv_small_values = pd.concat(iv_small_values,axis=1).min(axis=1)
    _del_func(obj,'iv_small',iv_small_del_cols,iv_small_values,thv)
    
def non_monotonic(obj):
    on_monotonic_del_cols=[]
    for k,v in obj.final_bins_trans.items():
        if (obj.filter_data_name is not None) and (k!=obj.filter_data_name):
            print('数据集不是指定数据',k,obj.filter_data_name)
            continue
        no_monotonic_cols,_,_ = ECBin.get_monotonic_info(v,obj.saved_X_cols)
        on_monotonic_del_cols.extend(no_monotonic_cols)
    _del_func(obj,'non_monotonic',on_monotonic_del_cols)
   
def high_corr(obj,thv):
    from Tool import del_high_corr
    ivs = []
    for k,v in obj.final_bins_trans.items():
        tmp = ECBin.bins2iv(v)
        tmp = tmp.loc[tmp.index.isin(obj.saved_X_cols)]
        ivs.append(tmp)
   
    ivs = pd.concat(ivs,axis=1)
    ivs = ivs.mean(axis=1).sort_values(ascending=False)
    corr = obj.woe_datas[obj.train_data_name][ivs.index].corr()
    corr_save_cols = del_high_corr(corr,thv)
    high_corr_del_cols = list(set(obj.saved_X_cols)-set(corr_save_cols))
    _del_func(obj,'high_corr',high_corr_del_cols,None,thv)
    
def user_del(obj):
    if obj.user_del is not None:
        _del_func(obj,'user_del',obj.user_del)